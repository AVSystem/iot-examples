{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "IamForLambda": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "SecretsManagerForLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "GetSecrets",
                  "Action": "secretsmanager:GetSecretValue",
                  "Resource": {
                    "Fn::Join": [
                      ":", [
                        "arn",
                        "aws",
                        "secretsmanager",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "secret",
                        "coioteDMrest-??????"
                      ]
                    ]
                  },
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "IamForOperationRequest": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "iot.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "OperationResponseCloudWatch",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AllowErrorOrMessageLogWriting",
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents",
                    "logs:CreateLogStream"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      ":", [
                        "arn",
                        "aws",
                        "logs",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "log-group",
                        "/AWSIotLogsV2/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "IamForOperationResponse": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "iot.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "OperationResponseRepublish",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "IotPublish",
                  "Effect": "Allow",
                  "Action": "iot:Publish",
                  "Resource": {
                    "Fn::Join": [
                      ":", [
                        "arn",
                        "aws",
                        "iot",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "topic/*"
                      ]
                    ]
                  }
                }
              ]
            }
          },
          {
            "PolicyName": "OperationResponseCloudWatch",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AllowErrorOrMessageLogWriting",
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents",
                    "logs:CreateLogStream"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      ":", [
                        "arn",
                        "aws",
                        "logs",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "log-group",
                        "/AWSIotLogsV2/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "Lwm2mOperationLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": "lwm2mOperation/",
        "FunctionName": "Lwm2mOperation",
        "Handler": "lambda_function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "IamForLambda",
            "Arn"
          ]
        },
        "Runtime": "python3.8"
      }
    },
    "LambdaInvocationPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "Lwm2mOperationLambda",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "iot.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::GetAtt": [
            "OperationRequestRule",
            "Arn"
          ]
        }
      }
    },
    "OperationRequestRule": {
      "DependsOn": "Lwm2mOperationLambda",
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "RuleName": "OperationRequest",
        "TopicRulePayload": {
          "Description": "This rule handles a desired LwM2M operation specified in the operation shadow",
          "AwsIotSqlVersion": "2016-03-23",
          "Sql": "SELECT state.desired.operation AS operation, state.desired.keys AS keys, state.desired.values AS values, state.desired.attributes AS attributes, state.desired.arguments AS arguments, topic(3) AS thingName FROM '$aws/things/+/shadow/name/operation/update/accepted' WHERE isUndefined(state.desired.operation) = false",
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {
                  "Fn::GetAtt": [
                    "Lwm2mOperationLambda",
                    "Arn"
                  ]
                }
              }
            }
          ],
          "ErrorAction": {
            "CloudwatchLogs": {
              "LogGroupName": "AWSIotLogsV2",
              "RoleArn": {
                "Fn::GetAtt": [
                  "IamForOperationRequest",
                  "Arn"
                ]
              }
            }
          }
        }
      }
    },
    "OperationResponseRule": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "RuleName": "OperationResponse",
        "TopicRulePayload": {
          "Description": "This rule handles a reported LwM2M operation result",
          "AwsIotSqlVersion": "2016-03-23",
          "Sql": "SELECT state.reported.result AS state.reported FROM '$aws/things/+/shadow/name/operation/update/accepted' WHERE (CASE isUndefined(state.reported.operation) WHEN true THEN false ELSE CASE state.reported.operation = 'read' OR state.reported.operation = 'write' OR state.reported.operation = 'readComposite' when true THEN true ELSE false END END) = true",
          "Actions": [
            {
              "Republish": {
                "RoleArn": {
                  "Fn::GetAtt": [
                    "IamForOperationResponse",
                    "Arn"
                  ]
                },
                "Topic": "$$aws/things/${topic(3)}/shadow/name/datamodel/update"
              }
            }
          ],
          "ErrorAction": {
            "CloudwatchLogs": {
              "LogGroupName": "AWSIotLogsV2",
              "RoleArn": {
                "Fn::GetAtt": [
                  "IamForOperationResponse",
                  "Arn"
                ]
              }
            }
          }
        }
      }
    },
    "CertificateLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Effect": "Allow"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "CloudWatchForCertificatesLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "logs:PutLogEvents",
                    "logs:CreateLogStream"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      ":", [
                        "arn",
                        "aws",
                        "logs",
                        {
                          "Ref": "AWS::Region"
                        },
                        {
                          "Ref": "AWS::AccountId"
                        },
                        "log-group",
                        "/AWSIotLogsV2/*"
                      ]
                    ]
                  },
                  "Effect": "Allow"
                }
              ]
            }
          },
          {
            "PolicyName": "IoTForCertificatesLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "iot:CreateKeysAndCertificate",
                    "iot:DetachPolicy",
                    "iot:UpdateCertificate",
                    "iot:DeleteCertificate"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          },
          {
            "PolicyName": "SecretsManagerForCertificatesLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "GetSecrets",
                  "Action": [
                    "secretsmanager:CreateSecret",
                    "secretsmanager:DeleteSecret",
                    "secretsmanager:PutSecretValue",
                    "secretsmanager:GetSecretValue"
                  ],
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":", [
                          "arn",
                          "aws",
                          "secretsmanager",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "secret",
                          "coioteDMcert-??????"
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        ":", [
                          "arn",
                          "aws",
                          "secretsmanager",
                          {
                            "Ref": "AWS::Region"
                          },
                          {
                            "Ref": "AWS::AccountId"
                          },
                          "secret",
                          "coioteDMcertData-??????"
                        ]
                      ]
                    }
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ]
      }
    },
    "CertificateLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "CertificateLambda",
        "Code": "certificates/",
        "Runtime": "python3.8",
        "Handler": "certificates.handler",
        "Timeout": 60,
        "Role": {
          "Fn::GetAtt": [
            "CertificateLambdaRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "coioteDMrestUri": {
              "Ref": "coioteDMrestUri"
            },
            "coioteDMrestPassword": {
              "Ref": "coioteDMrestPassword"
            },
            "coioteDMrestUsername": {
              "Ref": "coioteDMrestUsername"
            },
            "coioteDMrestDomainId": {
              "Ref": "coioteDMrestDomainId"
            }
          }
        }
      }
    },
    "CertificateCustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CertificateLambda",
            "Arn"
          ]
        }
      }
    }
  },
  "Parameters":{
    "coioteDMrestUri": {
      "Description": "Coiote DM REST URL - ex. https://lwm2m-test.avsystem.io:8087",
      "Type": "String"
    },
    "coioteDMrestPassword": {
      "Description": "Coiote DM REST User Password",
      "Type": "String",
      "NoEcho": true
    },
    "coioteDMrestUsername": {
      "Description": "Coiote DM REST User Username",
      "Type": "String"
    },
    "coioteDMrestDomainId": {
      "Description": "Coiote DM REST Domain ID",
      "Type": "String"
    }
  }
}